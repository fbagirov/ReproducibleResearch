generateTDM <- function(cand, path) {
s.dir <- sprintf("%s/%s", path, cand)
#for Mac, use 'UTF-8', for Windows, use 'ANSI'
s.cor <- Corpus(DirSource(directory = s.dir, encoding = 'UTF-8'))
s.cor.cl <- cleanCorpus(s.cor)
s.tdm <- TermDocumentMatrix(s.cor.cl)
s.tdm <- removeSparseTerms(s.tdm, 0.7)
result <- list(name = cand, tdm = s.tdm)
}
tdm <- lapply(candidates, generateTDM, path = pathname)
warnings()
str(tdm)
bindCandidateToTDM <- function(tdm) {
s.mat <- t(data.matrix(tdm[["tdm"]]))
s.df <- as.data.frame(s.mat, stringsAsFactors = FALSE)
s.df <- cbind(s.df, rep(tdm[["name"]], nrow(s.df)))
colnames(s.df)[ncol(s.df)]
return(s.df)
}
candTDM <- lapply(tdm, bindCandidateToTDM)
str(candTDM)
libs <- c("tm", "plyr", "class", "wordcloud", "SnowballC")
lapply(libs, require, character.only=TRUE)
options(stringsAsFactors = TRUE)
#set your working directory using setwd('[path]') or going to Session > Set Working Directory > Choose Directory
#create a Corpus
docs <- Corpus(DirSource(getwd()))
#create a function for removing special characters
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
#apply a function for removing special characters
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs <- tm_map(docs, toSpace, "\\|")
#further cleanup
docs <- tm_map(docs, content_transformer(removePunctuation))
docs <- tm_map(docs, content_transformer(stripWhitespace))
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, content_transformer(removeNumbers))
docs <- tm_map(docs, removeWords, stopwords("english"))
docs <- tm_map(docs, stemDocument)
worldcloud(docs, scale=c(5,0,5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.docs=FALSE, colors=brewer.pal(8,"Dark2"))
install.packages('wordcloud')
install.packages("wordcloud")
worldcloud(docs, scale=c(5,0,5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.docs=FALSE, colors=brewer.pal(8,"Dark2"))
?wordCloud
library(wordcloud)
worldcloud(docs, scale=c(5,0,5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.docs=FALSE, colors=brewer.pal(8,"Dark2"))
worldcloud(docs, scale=c(5,0,5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.docs=FALSE, colors=brewer.pal(8,"Dark2"))
wordcloud(docs, scale=c(5,0,5), max.words=100, random.order=FALSE, rot.per=0.35, use.r.docs=FALSE, colors=brewer.pal(8,"Dark2"))
library(twitterR)
install.packages('TwitterR')
install.packages('TwitteR')
install.packages('twitteR')
library("TwitteR")
library("twitteR")
tdmTweets <- userTimeline("rdatamining", n=100)
setup_twitter_oauth("JsDiT28G8PIAXthASbKc8HzrQ","KFAlscykB6VIeg6OjsU7Uvcwhr4HcXOMrelfNZvwRv6oXW9qWu")
setup_twitter_oauth("JsDiT28G8PIAXthASbKc8HzrQ","KFAlscykB6VIeg6OjsU7Uvcwhr4HcXOMrelfNZvwRv6oXW9qWu")
tdmTweets <- userTimeline("rdatamining", n=100)
setup_twitter_oauth("JsDiT28G8PIAXthASbKc8HzrQ","KFAlscykB6VIeg6OjsU7Uvcwhr4HcXOMrelfNZvwRv6oXW9qWu")
#install packages
install.packages('twitteR')
install.packages("twitteR")
library("twitteR")
setup_twitter_oauth("JsDiT28G8PIAXthASbKc8HzrQ","KFAlscykB6VIeg6OjsU7Uvcwhr4HcXOMrelfNZvwRv6oXW9qWu")
?base64enc
install.packages('base64enc')
library("twitteR")
setup_twitter_oauth("JsDiT28G8PIAXthASbKc8HzrQ","KFAlscykB6VIeg6OjsU7Uvcwhr4HcXOMrelfNZvwRv6oXW9qWu")
setup_twitter_oauth("JsDiT28G8PIAXthASbKc8HzrQ","KFAlscykB6VIeg6OjsU7Uvcwhr4HcXOMrelfNZvwRv6oXW9qWu")
library("base64enc")
setup_twitter_oauth("JsDiT28G8PIAXthASbKc8HzrQ","KFAlscykB6VIeg6OjsU7Uvcwhr4HcXOMrelfNZvwRv6oXW9qWu")
#install packages
install.packages('twitteR')
install.packages("twitteR")
install.packages('base64enc')
library("twitteR")
library("base64enc")
setup_twitter_oauth("oqnzOQRLwKXI2laGxq1vmdSn9","DLtko1tf5xu30wxyqmrctRdwnNWpGs6BSNcoCJIRTNdedgGsiP","14956278-rb1gwMcHLmRowxQW2B9cz3iYgYUj07gOVMOviDpzZ
","H86TdManvp5iQFoTq13UD64g2iQFCfzXAhBm4LhERG9Vs")
#install packages
install.packages('twitteR')
install.packages("twitteR")
install.packages('base64enc')
library("twitteR")
library("base64enc")
API_key = 'oqnzOQRLwKXI2laGxq1vmdSn9'
API_secret = 'DLtko1tf5xu30wxyqmrctRdwnNWpGs6BSNcoCJIRTNdedgGsiP'
Access_tkn = '14956278-rb1gwMcHLmRowxQW2B9cz3iYgYUj07gOVMOviDpzZ'
Access_scrt = 'H86TdManvp5iQFoTq13UD64g2iQFCfzXAhBm4LhERG9Vs'
setup_twitter_oauth(API_key,API_secret,Access_tkn,Access_scrt)
tdmTweets <- userTimeline("rdatamining", n=100)
n <- length(rdmTweets)
rdmTweets <- userTimeline("rdatamining", n=100)
n <- length(rdmTweets)
rdmTweets[1:3]
?userTimeline
head(rdmTweets)
rdmTweets
DS_tweets <- searchTwitter('#DataScience')
DS_tweets
DS_tweets <- Corpus(DS_tweets)
install.packages('tm','plyr','class')
DS_tweets <- Corpus(DS_tweets)
head(strip_retweets(DS_tweets, strip_manual = TRUE, strip_mt = TRUE))
#Looking at the users
cranstic <- getUser("FeyziBagirov")
cranstic$getDescription()
str(cranstic)
head(cranstic)
cranstic <- getUser("BillGates")
cranstic$getDescription()
?getUser
?cranstic
#Looking at the users
cranstic <- getUser("BillGates")
cranstic$getDescription()
cranstic$getFavorites()
#Conversion to data.frames
df <- twListToDF(DS_tweets)
head(df)
#Timelines - most recent 20
cran_tweets <- userTimeline('cranatic')
cran_tweets[1:5]
#Timelines - more than 20 tweets
cran_tweets_large <- userTimeline('cranatic', n=100)
length(cran_tweets_large)
#Trends
avail_trends = availableTrendLocations()
head(avail_trends)
close_trends = closestTrendLocations(38.9, 77)
head(close_trends)
#Example - what clients did users posted from?
r_tweets <- searchTwitter("#rstats", n=300)
sources <- sapply(r_tweets, function(x) x$getStatusSource())
sources <- gsub("</a>","", sources)
sources <- strsplit(sources, ">")
sources <- sapply(sources, function(x) ifelse(length(x) > 1, x[2], x[1]))
source_table = table(sources)
pie(source_table[source_table > 10])
r_tweets <- searchTwitter("#DataScience", n=300)
sources <- sapply(r_tweets, function(x) x$getStatusSource())
sources <- gsub("</a>","", sources)
sources <- strsplit(sources, ">")
sources <- sapply(sources, function(x) ifelse(length(x) > 1, x[2], x[1]))
source_table = table(sources)
pie(source_table[source_table > 10])
install.packages('tm')
library(tm)
library(tm.plugin.webmining)
install.packages('tm.plugin.webmining')
library(tm)
library(tm.plugin.webmining)
yahoonews <- WebCorpus(YahooNewsSource("Microsoft"))
class(yahoonews)
yahoonews
meta(yahoonews[[1]])
inspect(yahoonews)
install.packages('twitteR')
install.packages('base64enc')
library("twitteR")
library("base64enc")
API_key = '5DNM2Dn7UqdRcLE1Zjpi4YkjX'
API_secret = '6J3IfdtfVXmvoMX36h5lMon5meyjP3PhBNIP3KhCGomGqT9cJs'
Access_tkn = '14956278-HXTPKGza1x44wbijSYxvzXnNKiqMMHV5ZGIsMuBH7'
Access_scrt = 'BgATyGtgFwEdPqikO9JoCcBhiIH3P33uf1kZSdRchbvIG'
setup_twitter_oauth(API_key,API_secret,Access_tkn,Access_scrt)
rdmTweets <- userTimeline("rdatamining", n=100)
rdmTweets
n <- length(rdmTweets)
rdmTweets[1:3]
DS_tweets <- searchTwitter('#DataScience')
DS_tweets
#Looking at the users
cranstic <- getUser("FeyziBagirov")
cranstic
?cranstic
?getUser
cranstic$getDescription()
cranstic$getFavorites()
cranstic <- getUser("BillGates")
cranstic$getDescription()
cranstic$getFavorites()
#install packages
install.packages('base64enc')
install.packages('twitteR')
library("twitteR")
library("base64enc")
API_key = 'jUiFTVMtxlEsM9LXi0503TvYQ'
API_secret = 'M5SQoiFkTIsajemFqBDnqK0lmpkalKFFYNVTTSatl40XPsij4K'
Access_tkn = '14956278-7lD9QC6sYFYdpM8T6FOzC19vnVpRuTsz31RuHaeXC'
Access_scrt = 'ZW3ICFOMOxxngd20dhVefndonyDCiuFJNFZjDtWcPkrT0'
setup_twitter_oauth(API_key,API_secret,Access_tkn,Access_scrt)
rdmTweets <- userTimeline("rdatamining", n=100)
n <- length(rdmTweets)
rdmTweets[1:3]
DS_tweets <- searchTwitter('#DataScience')
DS_tweets
head(strip_retweets(DS_tweets, strip_manual = TRUE, strip_mt = TRUE))
cranstic <- getUser("FeyziBagirov")
cranstic$getDescription()
cranstic$getFavorites()
cranstic <- getUser("BillGates")
cranstic$getDescription()
cranstic$getFavorites()
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
5
info()
10/12
1/12
0.91666
info()
skip
info()
skip()
info()
bye()
targetDBP <- 70
m <- 80
q <- 10
percentage <- round(pnorm(targetDBP, mean = m, sd = q) * 100)
percentage
?swirl
?swirl
install.packages('swirl')
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam, 1:51)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob = 0.5)
trable(trainIndicator)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
trainIndicator
?rbinom
names(TrainSum)
names(trainSpam)
head(trainSpam)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
?log10
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(train$pam[, 1:57])))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
?data.frame
summary(cars)
summary(cars)
library(kernlab)
data(spam)
str(spam[, 1:5])
getwd()
setwd("~/Dropbox/01-BECKER COLLEGE/MOOCs/03-DATA SCIENCE (COURSERA)/05-Reproducible Research/WEEK2(Tools)/Peer Assessment 1")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
avg_steps_per_interval <- aggregate(x=list(mean_steps=monitoring_data$steps), by=list(interval=monitoring_data$interval), FUN=mean, na.rm=TRUE)
ggplot(avg_steps_per_interval, aes(x=interval, y=mean_steps)) + geom_line() + xlab("5-minute interval") + ylab("average number of steps taken")
max_steps <- which.max(avg_steps_per_interval$mean_steps)
time_max_steps <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avg_steps_per_interval[max_steps, 'interval'])
install.packages("ggplot2")
avg_steps_per_interval <- aggregate(x=list(mean_steps=monitoring_data$steps), by=list(interval=monitoring_data$interval), FUN=mean, na.rm=TRUE)
ggplot2(avg_steps_per_interval, aes(x=interval, y=mean_steps)) + geom_line() + xlab("5-minute interval") + ylab("average number of steps taken")
max_steps <- which.max(avg_steps_per_interval$mean_steps)
time_max_steps <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avg_steps_per_interval[max_steps, 'interval'])
ggplot(avg_steps_per_interval, aes(x=interval, y=mean_steps)) + geom_line() + xlab("5-minute interval") + ylab("average number of steps taken")
?ggplot
?ggplot2
install.packages("ggplot2")
library(ggplot2)
avg_steps_per_interval <- aggregate(x=list(mean_steps=monitoring_data$steps), by=list(interval=monitoring_data$interval), FUN=mean, na.rm=TRUE)
ggplot(avg_steps_per_interval, aes(x=interval, y=mean_steps)) + geom_line() + xlab("5-minute interval") + ylab("average number of steps taken")
max_steps <- which.max(avg_steps_per_interval$mean_steps)
time_max_steps <- gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avg_steps_per_interval[max_steps, 'interval'])
total_missing_values <- length(which(is.na(monitoring_data$steps)))
library(Hmisc)
monitoring_data_nona <-monitoring_data
monitoring_data_nona$steps <- impute(monitoring_data$steps, fun=mean)
steps_per_day_nona <- tapply(monitoring_data_nona$steps, monitoring_data_nona$date, sum, na.rm = TRUE)
hist(steps_per_day_nona)
steps_per_day_nona_mean <- mean(steps_per_day_nona)
steps_per_day_nona_median <- median(steps_per_day_nona)
steps_per_day_nona$dateType <- ifelse(as.Date(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
steps_per_day_nona$dateType <- ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
steps_per_day_nona <- tapply(monitoring_data_nona$steps, monitoring_data_nona$date, sum)
hist(steps_per_day_nona)
steps_per_day_nona_mean <- mean(steps_per_day_nona)
steps_per_day_nona_median <- median(steps_per_day_nona)
steps_per_day_nona$dateType <- ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
steps_per_day_nona <- tapply(monitoring_data_nona$steps, monitoring_data_nona$date, sum)
qplot(steps_per_day_nona, xlab="Total steps per day (Imputed)", ylab="Frequency using binwith 500", binwidth=500)
#hist(steps_per_day_nona)
steps_per_day_nona_mean <- mean(steps_per_day_nona)
steps_per_day_nona_median <- median(steps_per_day_nona)
steps_per_day_nona$dateType <- ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
day <- weekdays(steps_per_day_nona$date)
daylevel <- vector()
for (i in 1:nrow(steps_per_day_nona)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
?weekdays
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
day <- weekdays(steps_per_day_nona$date)
daylevel <- vector()
for (i in 1:nrow(steps_per_day_nona)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
day <- weekdays(steps_per_day_nona$date)
is.recursive(steps_per_day_nona)
is.atomic(steps_per_day_mean)
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#day <- weekdays(steps_per_day_nona$date)
#daylevel <- vector()
#for (i in 1:nrow(steps_per_day_nona)) {
#        if (day[i] == "Saturday") {
#                daylevel[i] <- "Weekend"
#        } else if (day[i] == "Sunday") {
#                daylevel[i] <- "Weekend"
#        } else {
#                daylevel[i] <- "Weekday"
#        }
#}
steps_per_day_nona$dateType <- ifelse(as.POSIXlt(steps_per_day_nona[date])$wday %in% c(0,6), 'weekend', 'weekday')
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#day <- weekdays(steps_per_day_nona$date)
#daylevel <- vector()
#for (i in 1:nrow(steps_per_day_nona)) {
#        if (day[i] == "Saturday") {
#                daylevel[i] <- "Weekend"
#        } else if (day[i] == "Sunday") {
#                daylevel[i] <- "Weekend"
#        } else {
#                daylevel[i] <- "Weekday"
#        }
#}
steps_per_day_nona$dateType <- ifelse(as.POSIXlt(steps_per_day_nona[date])[wday] %in% c(0,6), 'weekend', 'weekday')
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#day <- weekdays(steps_per_day_nona$date)
#daylevel <- vector()
#for (i in 1:nrow(steps_per_day_nona)) {
#        if (day[i] == "Saturday") {
#                daylevel[i] <- "Weekend"
#        } else if (day[i] == "Sunday") {
#                daylevel[i] <- "Weekend"
#        } else {
#                daylevel[i] <- "Weekday"
#        }
#}
day <- weekdays(steps_per_day_nona$date)
daylevel <- vector()
for (i in 1:nrow(steps_per_day_nona)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
? day
?day
day <- weekdays(steps_per_day_nona$date)
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#day <- weekdays(steps_per_day_nona$date)
#daylevel <- vector()
#for (i in 1:nrow(steps_per_day_nona)) {
#        if (day[i] == "Saturday") {
#                daylevel[i] <- "Weekend"
#        } else if (day[i] == "Sunday") {
#                daylevel[i] <- "Weekend"
#        } else {
#                daylevel[i] <- "Weekday"
#        }
#}
day <- weekdays(steps_per_day_nona[date])
daylevel <- vector()
for (i in 1:nrow(steps_per_day_nona)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
day <- weekdays(steps_per_day_nona[date])
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#day <- weekdays(steps_per_day_nona$date)
#daylevel <- vector()
#for (i in 1:nrow(steps_per_day_nona)) {
#        if (day[i] == "Saturday") {
#                daylevel[i] <- "Weekend"
#        } else if (day[i] == "Sunday") {
#                daylevel[i] <- "Weekend"
#        } else {
#                daylevel[i] <- "Weekday"
#        }
#}
day <- weekdays(as.vector(steps_per_day_nona$date)
daylevel <- vector()
for (i in 1:nrow(steps_per_day_nona)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#day <- weekdays(steps_per_day_nona$date)
#daylevel <- vector()
#for (i in 1:nrow(steps_per_day_nona)) {
#        if (day[i] == "Saturday") {
#                daylevel[i] <- "Weekend"
#        } else if (day[i] == "Sunday") {
#                daylevel[i] <- "Weekend"
#        } else {
#                daylevel[i] <- "Weekday"
#        }
#}
day <- weekdays(as.vector(steps_per_day_nona[date])
daylevel <- vector()
for (i in 1:nrow(steps_per_day_nona)) {
if (steps_per_day_nona[i,date] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (steps_per_day_nona[i,date] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
steps_per_day_nona
steps_per_day_nona_2 <- as.vector(steps_per_day_nona)
day <- weekdays (steps_per_day_nona_2$date)
is.atomic(steps_per_day_nona_2)
#steps_per_day_nona$dateType <- #ifelse(as.POSIXlt(steps_per_day_nona$date)$wday %in% c(0,6), 'weekend', 'weekday')
#day <- weekdays(steps_per_day_nona$date)
#daylevel <- vector()
#for (i in 1:nrow(steps_per_day_nona)) {
#        if (day[i] == "Saturday") {
#                daylevel[i] <- "Weekend"
#        } else if (day[i] == "Sunday") {
#                daylevel[i] <- "Weekend"
#        } else {
#                daylevel[i] <- "Weekday"
#        }
#}
day <- weekdays(steps_per_day_nona)
daylevel <- vector()
for (i in 1:nrow(steps_per_day_nona)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
steps_per_day_nona_2 <- as.data.frame(steps_per_day_nona)
day <- weekdays(steps_per_day_nona_2$date)
as.data.frame(steps_per_day_nona_2)
class(steps_per_day_nona_2)
steps_per_day_nona_2$date
steps_per_day_nona_2 <- as.vector(steps_per_day_nona)
steps_per_day_nona_2$date
as.atomic(steps_per_day_nona_2)
steps_per_day_nona_2 <- as.Date(steps_per_day_nona$date)
steps_per_day_nona_2 <- as.Date(steps_per_day_nona[date])
steps_per_day_nona_2 <- as.Date(steps_per_day_nona[,date])
steps_per_day_nona_2 <- as.Date(steps_per_day_nona[date,])
steps_per_day_nona_2 <- as.matrix(steps_per_day_nona)
steps_per_day_nona_2$date
steps_per_day_nona_2 <- as.array(steps_per_day_nona)
steps_per_day_nona_2[date]
steps_per_day_nona_2$date
steps_per_day_nona_2 <- as.vector(steps_per_day_nona)
steps_per_day_nona_2$date
steps_per_day_nona_2 <- as.vector.factor(steps_per_day_nona)
steps_per_day_nona_2$date
